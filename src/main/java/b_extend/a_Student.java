package b_extend;
/*
   继承是面向对象三大特征之一。可以使得子类具有的父类属性和方法，还可以在子类中重新定义，追加属性和方法

   继承的格式
   格式：public class 子类名 extends 父类名{}
   范例：public class Zi extends Fu{}；
 */
/*
   继承好处
   提高了代码的复用性（多个类相同的成员可以放到同一个类中）
   提高了代码的维护性（如果方法的代码需要修改，修改一处即可）

   继承弊端
   继承让类与类之间产生了关系，类的耦合性增强了，当父类发生变化时，子类也不得不跟着变化，削弱了子类的独立性

   什么时候使用继承？
   继承的体现关系：is 和 a
   举例： 狗和动物，苹果和水果
 */
/*
   继承中变量的优先级
   子类方法>子类属性>父类方法>父类属性
 */
//继承中构造方法的访问特点
/*
    使用main方法创建对象，调用方法时，会出现两个问题
    1、使用子类无参构造方法时，会调用父类无参构造方法
    2.使用子类带参构造方法时，也会调用父类无参构造方法

    特点：子类中的所有构造方法默认都会访问父类中无参的构造方法
    问什么？
    1.子类会继承父类中的数据，可能还会使用父类的数据，所以，子类初始胡之前，一定要先完成父类数据的初始化
    2.每一个子类构造方法的第一条语句默认都是：super（）

    如果父类中没有无参构造方法，只有带参构造方法，该怎么办？
    1。通过使用super关键字去显示的调用父类的带参构造方法
    2.在父类中自己提供一个无参构造方法
    推荐：使用2

 */
//继承中成员方法的访问特点
/*
通过子类对象访问一个方法：
1.首先先在子类范围找
2.再在父类成员范围找
3.如果都没有就报错（不考虑父亲的父亲）
 */

//方法重写
/*
概述：子类中出现子和父类一摸一样的方法声明
应用：当子类需要父类的功能，而功能主体子类有自己特有内容时，可以重写父类中的方法，这样，即沿袭了父类的功能，又定义了子类的特有功能

@override
1.是一个注解
2.可以帮助我们检查重写方法的方法声明的正确性

重写方法的注意事项：
1.私有方法不能被重写（父类私有成员子类是不可能继承的）
2.子类方法访问权限不能更低（public>默认>private）
@也就是：父类的访问权限是默认的，子类只有是public或者默认才能重写

继承的注意事项：
1.java中只支持单继承，不支持多继承
2.java中支持多层继承（也就是可以使用父亲继承父亲的父亲，以此让son同时继承父亲和父亲的父亲）

 */
public class a_Student {

}
