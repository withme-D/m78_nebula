package c_polymorphism;

/*
多态概念：
      同一个对象，在不同时刻变现处出来的不同形态

前提和体现
      1.有继承/实现关系
      2.有方法重写
      3.有父类引用指向子类对象

 多台中成员访问特点
      范例：Animal a = new Cat（）；
      1.成员变量：编译看左边，执行看左边
      2.成员方法：编译看左边，执行看右边
      为什么成员变量和成员方法的访问不一样那？
      因为尘成员方法有重写（@override），成员变量没有

 多台的好处和弊端
      好处：提高了程序的扩展性
           具体体现：定义方法的时候，使用父类型作为参数，将来在使用的时候，使用具体的子类型参与操作
      弊端：不能使用子类的特有功能

 多态的转型：
 帮助我们可以实现子类中的特有功能
 1.向上转型：从子到父，父类引用指向子类对象
       例如：Animal a = new Cat();
            a.eat();
        注意：a.playGame();不可以使用，因为现在是创建的Cat对象，但使用的是Animal引用。
        要想使用PlayGame方法，得将它进行强制转换，也就是向下转型
 2.向下转型：父类引用转为子类对象
       例如：Animal b = new Cat();
            Cat c = (Cat)b;   将Animal b强制转换成Cat b，并且赋值给Cat C
            c.eat();
            c.playGame();

 */
public class a_Dome {
}
